// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  errors

import (
  jlexer "github.com/mailru/easyjson/jlexer"
  jwriter "github.com/mailru/easyjson/jwriter"
)

func easyjsonD31a5a85DecodeGithubComSubizErrors(in *jlexer.Lexer, out *Error) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "description":
      out.Description = string(in.String())
    case "debug":
      out.Debug = string(in.String())
    case "class":
      out.Class = int32(in.Int32())
    case "stack":
      out.Stack = string(in.String())
    case "created":
      out.Created = int64(in.Int64())
    case "code":
      out.Code = string(in.String())
    case "root":
      out.Root = string(in.String())
    case "request_id":
      out.RequestId = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonD31a5a85EncodeGithubComSubizErrors(out *jwriter.Writer, in Error) {
  out.RawByte('{')
  first := true
  _ = first
  if in.Description != "" {
    const prefix string = ",\"description\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Description))
  }
  if in.Debug != "" {
    const prefix string = ",\"debug\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Debug))
  }
  if in.Class != 0 {
    const prefix string = ",\"class\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int32(int32(in.Class))
  }
  if in.Stack != "" {
    const prefix string = ",\"stack\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Stack))
  }
  if in.Created != 0 {
    const prefix string = ",\"created\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.Created))
  }
  if in.Code != "" {
    const prefix string = ",\"code\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Code))
  }
  if in.Root != "" {
    const prefix string = ",\"root\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Root))
  }
  if in.RequestId != "" {
    const prefix string = ",\"request_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RequestId))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonD31a5a85EncodeGithubComSubizErrors(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonD31a5a85DecodeGithubComSubizErrors(&r, v)
  return r.Error()
}
